{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/searchbox/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleOnChange","type","onChange","App","handleChange","e","setState","searchMonster","target","value","console","log","age","state","fetch","then","response","json","data","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4SAGaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,gCAAML,EAAMI,QAAQE,KAApB,KACA,2BAAIN,EAAMI,QAAQG,UCFXC,EAAW,SAACR,GACvB,OAAO,yBAAKC,UAAU,aACXD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCL/BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,eAAf,OACrB,2BAAQb,UAAU,SAASc,KAAK,SAASF,YAAcA,EAAcG,SAAUF,MCqEpEG,E,kDAjEX,aAAe,IAAD,8BACV,gBASJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAEC,cAAeF,EAAEG,OAAOC,QACxCC,QAAQC,IAAI,EAAKC,MAVjB,EAAKC,MAAQ,CACTlB,SAAU,GACVY,cAAe,IAJT,E,gEAiBO,IAAD,OAChBO,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAK,EAAKZ,SAAS,CAAEX,SAAUuB,S,mCAepCb,GACTc,KAAKb,SAAS,CAAEC,cAAeF,EAAEG,OAAOC,U,+BAMlC,IAAD,EAC+BU,KAAKN,MAAjClB,EADH,EACGA,SAAUY,EADb,EACaA,cACZa,EAAiBzB,EAAS0B,QAAO,SAAA/B,GAAO,OAAIA,EAAQE,KAAK8B,cAAcC,SAAShB,EAAce,kBAEpG,OACI,yBAAKnC,UAAU,OAOX,kBAAC,EAAD,CAAWY,YAAY,SAASC,eAAgBmB,KAAKf,eAErD,kBAAC,EAAD,CAAUT,SAAUyB,S,GAzDlBI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.d407a262.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) =>(\r\n    <div className='card-container'>\r\n      <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set3`} />\r\n      <h3> {props.monster.name} </h3>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport '../card-list/card-list.style.css'\r\n\r\nimport { Card } from '../card/card-component'\r\n\r\nexport const CardList = (props) =>{\r\n  return <div className='card-list'>\r\n            {props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster} />  \r\n            )}</div>\r\n}\r\n","import React from 'react'\r\nimport '../searchbox/search-box.style.css'\r\n\r\nexport const SearchBox = ({placeholder, handleOnChange}) => \r\n    <input  className='search' type='search' placeholder={ placeholder } onChange={handleOnChange} />","import React from 'react';\nimport './App.css';\nimport { Component } from 'react';\n\nimport { CardList } from '../src/components/card-list/card-list.component'\nimport { SearchBox } from '../src/components/searchbox/search-box.component'\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchMonster: ''\n        }\n\n        // this.testFunction2 = this.testFunction1.bind(this);\n    }\n\n    handleChange = (e) => {\n        this.setState({ searchMonster: e.target.value })\n        console.log(this.age)\n\n    }\n\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(data => (this.setState({ monsters: data })))\n    }\n\n\n    // testFunction1(){\n    //     console.log('Clicked 1 or 2')\n    // }\n\n    // testFunction3(){\n    //     console.log('Clicked 3')\n    // }\n    // testFunction4(){\n    //     console.log('Clicked 4')\n    // }\n\n    handleChange(e) {\n        this.setState({ searchMonster: e.target.value })\n    }\n    // this will work without first binding handleChange to this\n    // handleChange = (e) => {\n    //     this.setState({searchMonster: e.target.value})\n    // }\n    render() {\n        const { monsters, searchMonster } = this.state;\n        const filterMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchMonster.toLowerCase()))\n\n        return (\n            <div className='App'>\n\n                {/* <button onClick={this.testFunction1()}>Click 1</button>\n                <button onClick={this.testFunction2}>Click 2</button>\n                <button onClick={this.testFunction3}>Click 3</button>\n                <button onClick={this.testFunction4}>Click 4</button> */}\n\n                <SearchBox placeholder='Search' handleOnChange={this.handleChange} />\n                {/* <input type='search' placeholder= \"Search Monster\" onChange={ e => (this.setState({ searchMonster: e.target.value }))} /> */}\n                <CardList monsters={filterMonsters} />\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}